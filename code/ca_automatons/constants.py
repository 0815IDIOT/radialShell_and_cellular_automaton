import numpy as np

# cannot use enums because numba :^)

# modes to speed up oxygen diffusion calculation
CPERFORMANCE_FULL = 0        # calculate whole grid
CPERFORMANCE_VICINITY = 1    # calculate only in vicinity of tumor
CPERFORMANCE_ANALYTICAL = 2  # only use analytical calculation, do not use numerical c_stationary()
CPERFORMANCE__LEN = 3

# modes of calculation used in spericalODE.py
CMODE_P0_GRID = 0  # p0 is reached at R = parameters["dx"]*N_grid
CMODE_P0_INFTY = 1  # p0 is reached at R-->infty
CMODE_P0_R0 = 2  # p0 is reached at r0 (see GriKelBloPar2014)
CMODE__LEN = 3

# constants for possible cell states
CELL_STATE_PROLIFERATING = 0
CELL_STATE_HYPOXIC= 1
CELL_STATE_ANOXIC = 2
CELL_STATE_MITCATA = 3
CELL_STATE_FREE = 4
CELL_STATE__LEN = 5

# Constants for Cell Attributes
# cells = np.array( (num_cells,num_attributes) )
CELL_ATTR_SIZE = 0
CELL_ATTR_STATE = 1
CELL_ATTR_T_LAST_DIV = 2
CELL_ATTR_T_LAST_TREAT = 3
CELL_ATTR_HT_ARREST_T = 4
CELL_ATTR__LEN = 5

# Constants for Grid
# grid = np.array( (x,y,z,num_attributes) )
# i.e. each 3D grid cell (voxel) stores the following attributes
# as an array [space, consume, index, oxygen]
GRID_ATTR_FRAC_SPACE = 0  # fraction of occupied space
GRID_ATTR_FRAC_CONSUME = 1  # fraction that consumes
GRID_ATTR_INDEX = 2  # cell index
# GRID_ATTR_C_OXYGEN = 3     # concentration oxygen
GRID_ATTR__LEN = 3

# Neighborhoods
# von Neumann Neighborhood of 1st order
NEIGHBORHOOD_NEUMANN1 = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, -1]], dtype=np.int64)
NEIGHBORHOOD_NEUMANN1_LEFT = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]], dtype=np.int64)
NEIGHBORHOOD_NEUMANN1_RIGHT = np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]], dtype=np.int64)
NEIGHBORHOOD_NEUMANN1_DIAG1 = np.array([[1, 0, 0], [0, 1, 1], [0, -1, 1], [-1, 0, 0], [0, -1, -1], [0, 1, -1]], dtype=np.int64)
NEIGHBORHOOD_NEUMANN1_DIAG2 = np.array([[1, 1, 0], [-1, 1, 0], [0, 0, 1], [-1, -1, 0], [1, -1, 0], [0, 0, -1]], dtype=np.int64)
NEIGHBORHOOD_NEUMANN1_DIAG3 = np.array([[1, 0, 1], [0, 1, 0], [-1, 0, 1], [-1, 0, -1], [0, -1, 0], [1, 0, -1]], dtype=np.int64)
# von Neumann Neighborhood of 2nd order
NEIGHBORHOOD_NEUMANN2 = np.append(NEIGHBORHOOD_NEUMANN1, 2 * NEIGHBORHOOD_NEUMANN1, axis=0)
NEIGHBORHOOD_NEUMANN3 = np.append(NEIGHBORHOOD_NEUMANN2, 3 * NEIGHBORHOOD_NEUMANN1, axis=0)

# Moore Neighborhood 1st order
NEIGHBORHOOD_MOORE1 = np.array([
    [1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, -1],
    [1, 1, 0], [1, -1, 0], [-1, 1, 0], [-1, -1, 0],
    [1, 0, 1], [1, 0, -1], [-1, 0, 1], [-1, 0, -1],
    [0, 1, 1], [0, 1, -1], [0, -1, 1], [0, -1, -1],
    [1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1],
    [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]
], dtype=np.int64)

NEIGHBORHOOD_MOORE2 = np.append(NEIGHBORHOOD_MOORE1, 2 * NEIGHBORHOOD_MOORE1, axis=0)
NEIGHBORHOOD_MOORE2 = np.append(NEIGHBORHOOD_MOORE2, np.array([
    [2, 1, 0], [2, -1, 0], [-2, 1, 0], [-2, -1, 0],
    [1, 2, 0], [1, -2, 0], [-1, 2, 0], [-1, -2, 0],
    [2, 0, 1], [2, 0, -1], [-2, 0, 1], [-2, 0, -1],
    [1, 0, 2], [1, 0, -2], [-1, 0, 2], [-1, 0, -2],
    [0, 2, 1], [0, 2, -1], [0, -2, 1], [0, -2, -1],
    [0, 1, 2], [0, 1, -2], [0, -1, 2], [0, -1, -2],
    [2, 1, 1], [2, 1, -1], [2, -1, 1], [2, -1, -1],
    [-2, 1, 1], [-2, 1, -1], [-2, -1, 1], [-2, -1, -1],
    [1, 2, 1], [1, 2, -1], [-1, 2, 1], [-1, 2, -1],
    [1, -2, 1], [1, -2, -1], [-1, -2, 1], [-1, -2, -1],
    [1, 1, 2], [1, -1, 2], [-1, 1, 2], [-1, -1, 2],
    [1, 1, -2], [1, -1, -2], [-1, 1, -2], [-1, -1, -2],
    [2, 2, 1], [2, 2, -1], [2, -2, 1], [2, -2, -1],
    [-2, 2, 1], [-2, 2, -1], [-2, -2, 1], [-2, -2, -1],
    [2, 1, 2], [2, -1, 2], [2, 1, -2], [2, -1, -2],
    [-2, 1, 2], [-2, -1, 2], [-2, 1, -2], [-2, -1, -2],
    [1, 2, 2], [-1, 2, 2], [1, -2, 2], [-1, -2, 2],
    [1, 2, -2], [-1, 2, -2], [1, -2, -2], [-1, -2, -2]
], dtype=np.int64), axis=0)

NEIGHBORHOOD_MOORE3 = np.append(NEIGHBORHOOD_MOORE2, np.array([
    [-3, -3, -3], [-3, -3, -2], [-3, -3, -1], [-3, -3, 0], [-3, -3, 1], [-3, -3, 2], 
    [-3, -3, 3], [-3, -2, -3], [-3, -2, -2], [-3, -2, -1], [-3, -2, 0], [-3, -2, 1], 
    [-3, -2, 2], [-3, -2, 3], [-3, -1, -3], [-3, -1, -2], [-3, -1, -1], [-3, -1, 0], 
    [-3, -1, 1], [-3, -1, 2], [-3, -1, 3], [-3, 0, -3], [-3, 0, -2], [-3, 0, -1], 
    [-3, 0, 0], [-3, 0, 1], [-3, 0, 2], [-3, 0, 3], [-3, 1, -3], [-3, 1, -2], 
    [-3, 1, -1], [-3, 1, 0], [-3, 1, 1], [-3, 1, 2], [-3, 1, 3], [-3, 2, -3], 
    [-3, 2, -2], [-3, 2, -1], [-3, 2, 0], [-3, 2, 1], [-3, 2, 2], [-3, 2, 3], 
    [-3, 3, -3], [-3, 3, -2], [-3, 3, -1], [-3, 3, 0], [-3, 3, 1], [-3, 3, 2], 
    [-3, 3, 3], [-2, -3, -3], [-2, -3, -2], [-2, -3, -1], [-2, -3, 0], [-2, -3, 1], 
    [-2, -3, 2], [-2, -3, 3], [-2, -2, -3], [-2, -2, 3], [-2, -1, -3], [-2, -1, 3], 
    [-2, 0, -3], [-2, 0, 3], [-2, 1, -3], [-2, 1, 3], [-2, 2, -3], [-2, 2, 3], 
    [-2, 3, -3], [-2, 3, -2], [-2, 3, -1], [-2, 3, 0], [-2, 3, 1], [-2, 3, 2], 
    [-2, 3, 3], [-1, -3, -3], [-1, -3, -2], [-1, -3, -1], [-1, -3, 0], [-1, -3, 1], 
    [-1, -3, 2], [-1, -3, 3], [-1, -2, -3], [-1, -2, 3], [-1, -1, -3], [-1, -1, 3], 
    [-1, 0, -3], [-1, 0, 3], [-1, 1, -3], [-1, 1, 3], [-1, 2, -3], [-1, 2, 3], 
    [-1, 3, -3], [-1, 3, -2], [-1, 3, -1], [-1, 3, 0], [-1, 3, 1], [-1, 3, 2], 
    [-1, 3, 3], [0, -3, -3], [0, -3, -2], [0, -3, -1], [0, -3, 0], [0, -3, 1], 
    [0, -3, 2], [0, -3, 3], [0, -2, -3], [0, -2, 3], [0, -1, -3], [0, -1, 3], 
    [0, 0, -3], [0, 0, 3], [0, 1, -3], [0, 1, 3], [0, 2, -3], [0, 2, 3], 
    [0, 3, -3], [0, 3, -2], [0, 3, -1], [0, 3, 0], [0, 3, 1], [0, 3, 2], 
    [0, 3, 3], [1, -3, -3], [1, -3, -2], [1, -3, -1], [1, -3, 0], [1, -3, 1], 
    [1, -3, 2], [1, -3, 3], [1, -2, -3], [1, -2, 3], [1, -1, -3], [1, -1, 3], 
    [1, 0, -3], [1, 0, 3], [1, 1, -3], [1, 1, 3], [1, 2, -3], [1, 2, 3], 
    [1, 3, -3], [1, 3, -2], [1, 3, -1], [1, 3, 0], [1, 3, 1], [1, 3, 2], 
    [1, 3, 3], [2, -3, -3], [2, -3, -2], [2, -3, -1], [2, -3, 0], [2, -3, 1], 
    [2, -3, 2], [2, -3, 3], [2, -2, -3], [2, -2, 3], [2, -1, -3], [2, -1, 3], 
    [2, 0, -3], [2, 0, 3], [2, 1, -3], [2, 1, 3], [2, 2, -3], [2, 2, 3], 
    [2, 3, -3], [2, 3, -2], [2, 3, -1], [2, 3, 0], [2, 3, 1], [2, 3, 2], 
    [2, 3, 3], [3, -3, -3], [3, -3, -2], [3, -3, -1], [3, -3, 0], [3, -3, 1], 
    [3, -3, 2], [3, -3, 3], [3, -2, -3], [3, -2, -2], [3, -2, -1], [3, -2, 0], 
    [3, -2, 1], [3, -2, 2], [3, -2, 3], [3, -1, -3], [3, -1, -2], [3, -1, -1], 
    [3, -1, 0], [3, -1, 1], [3, -1, 2], [3, -1, 3], [3, 0, -3], [3, 0, -2], 
    [3, 0, -1], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, -3], 
    [3, 1, -2], [3, 1, -1], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], 
    [3, 2, -3], [3, 2, -2], [3, 2, -1], [3, 2, 0], [3, 2, 1], [3, 2, 2], 
    [3, 2, 3], [3, 3, -3], [3, 3, -2], [3, 3, -1], [3, 3, 0], [3, 3, 1], 
    [3, 3, 2], [3, 3, 3]], dtype=np.int64), axis=0)

NEIGHBORHOOD_MOORE4 = np.append(NEIGHBORHOOD_MOORE3, np.array([
    [-4, -4, -4], [-4, -4, -3], [-4, -4, -2], [-4, -4, -1], [-4, -4, 0], [-4, -4, 1], 
    [-4, -4, 2], [-4, -4, 3], [-4, -4, 4], [-4, -3, -4], [-4, -3, -3], [-4, -3, -2], 
    [-4, -3, -1], [-4, -3, 0], [-4, -3, 1], [-4, -3, 2], [-4, -3, 3], [-4, -3, 4], 
    [-4, -2, -4], [-4, -2, -3], [-4, -2, -2], [-4, -2, -1], [-4, -2, 0], [-4, -2, 1], 
    [-4, -2, 2], [-4, -2, 3], [-4, -2, 4], [-4, -1, -4], [-4, -1, -3], [-4, -1, -2], 
    [-4, -1, -1], [-4, -1, 0], [-4, -1, 1], [-4, -1, 2], [-4, -1, 3], [-4, -1, 4], 
    [-4, 0, -4], [-4, 0, -3], [-4, 0, -2], [-4, 0, -1], [-4, 0, 0], [-4, 0, 1], 
    [-4, 0, 2], [-4, 0, 3], [-4, 0, 4], [-4, 1, -4], [-4, 1, -3], [-4, 1, -2], 
    [-4, 1, -1], [-4, 1, 0], [-4, 1, 1], [-4, 1, 2], [-4, 1, 3], [-4, 1, 4], 
    [-4, 2, -4], [-4, 2, -3], [-4, 2, -2], [-4, 2, -1], [-4, 2, 0], [-4, 2, 1], 
    [-4, 2, 2], [-4, 2, 3], [-4, 2, 4], [-4, 3, -4], [-4, 3, -3], [-4, 3, -2], 
    [-4, 3, -1], [-4, 3, 0], [-4, 3, 1], [-4, 3, 2], [-4, 3, 3], [-4, 3, 4], 
    [-4, 4, -4], [-4, 4, -3], [-4, 4, -2], [-4, 4, -1], [-4, 4, 0], [-4, 4, 1], 
    [-4, 4, 2], [-4, 4, 3], [-4, 4, 4], [-3, -4, -4], [-3, -4, -3], [-3, -4, -2], 
    [-3, -4, -1], [-3, -4, 0], [-3, -4, 1], [-3, -4, 2], [-3, -4, 3], [-3, -4, 4], 
    [-3, -3, -4], [-3, -3, 4], [-3, -2, -4], [-3, -2, 4], [-3, -1, -4], [-3, -1, 4], 
    [-3, 0, -4], [-3, 0, 4], [-3, 1, -4], [-3, 1, 4], [-3, 2, -4], [-3, 2, 4], 
    [-3, 3, -4], [-3, 3, 4], [-3, 4, -4], [-3, 4, -3], [-3, 4, -2], [-3, 4, -1], 
    [-3, 4, 0], [-3, 4, 1], [-3, 4, 2], [-3, 4, 3], [-3, 4, 4], [-2, -4, -4], 
    [-2, -4, -3], [-2, -4, -2], [-2, -4, -1], [-2, -4, 0], [-2, -4, 1], [-2, -4, 2], 
    [-2, -4, 3], [-2, -4, 4], [-2, -3, -4], [-2, -3, 4], [-2, -2, -4], [-2, -2, 4], 
    [-2, -1, -4], [-2, -1, 4], [-2, 0, -4], [-2, 0, 4], [-2, 1, -4], [-2, 1, 4], 
    [-2, 2, -4], [-2, 2, 4], [-2, 3, -4], [-2, 3, 4], [-2, 4, -4], [-2, 4, -3], 
    [-2, 4, -2], [-2, 4, -1], [-2, 4, 0], [-2, 4, 1], [-2, 4, 2], [-2, 4, 3], 
    [-2, 4, 4], [-1, -4, -4], [-1, -4, -3], [-1, -4, -2], [-1, -4, -1], [-1, -4, 0], 
    [-1, -4, 1], [-1, -4, 2], [-1, -4, 3], [-1, -4, 4], [-1, -3, -4], [-1, -3, 4], 
    [-1, -2, -4], [-1, -2, 4], [-1, -1, -4], [-1, -1, 4], [-1, 0, -4], [-1, 0, 4], 
    [-1, 1, -4], [-1, 1, 4], [-1, 2, -4], [-1, 2, 4], [-1, 3, -4], [-1, 3, 4], 
    [-1, 4, -4], [-1, 4, -3], [-1, 4, -2], [-1, 4, -1], [-1, 4, 0], [-1, 4, 1], 
    [-1, 4, 2], [-1, 4, 3], [-1, 4, 4], [0, -4, -4], [0, -4, -3], [0, -4, -2], 
    [0, -4, -1], [0, -4, 0], [0, -4, 1], [0, -4, 2], [0, -4, 3], [0, -4, 4], 
    [0, -3, -4], [0, -3, 4], [0, -2, -4], [0, -2, 4], [0, -1, -4], [0, -1, 4], 
    [0, 0, -4], [0, 0, 4], [0, 1, -4], [0, 1, 4], [0, 2, -4], [0, 2, 4], 
    [0, 3, -4], [0, 3, 4], [0, 4, -4], [0, 4, -3], [0, 4, -2], [0, 4, -1], 
    [0, 4, 0], [0, 4, 1], [0, 4, 2], [0, 4, 3], [0, 4, 4], [1, -4, -4], 
    [1, -4, -3], [1, -4, -2], [1, -4, -1], [1, -4, 0], [1, -4, 1], [1, -4, 2], 
    [1, -4, 3], [1, -4, 4], [1, -3, -4], [1, -3, 4], [1, -2, -4], [1, -2, 4], 
    [1, -1, -4], [1, -1, 4], [1, 0, -4], [1, 0, 4], [1, 1, -4], [1, 1, 4], 
    [1, 2, -4], [1, 2, 4], [1, 3, -4], [1, 3, 4], [1, 4, -4], [1, 4, -3], 
    [1, 4, -2], [1, 4, -1], [1, 4, 0], [1, 4, 1], [1, 4, 2], [1, 4, 3], 
    [1, 4, 4], [2, -4, -4], [2, -4, -3], [2, -4, -2], [2, -4, -1], [2, -4, 0], 
    [2, -4, 1], [2, -4, 2], [2, -4, 3], [2, -4, 4], [2, -3, -4], [2, -3, 4], 
    [2, -2, -4], [2, -2, 4], [2, -1, -4], [2, -1, 4], [2, 0, -4], [2, 0, 4], 
    [2, 1, -4], [2, 1, 4], [2, 2, -4], [2, 2, 4], [2, 3, -4], [2, 3, 4], 
    [2, 4, -4], [2, 4, -3], [2, 4, -2], [2, 4, -1], [2, 4, 0], [2, 4, 1], 
    [2, 4, 2], [2, 4, 3], [2, 4, 4], [3, -4, -4], [3, -4, -3], [3, -4, -2], 
    [3, -4, -1], [3, -4, 0], [3, -4, 1], [3, -4, 2], [3, -4, 3], [3, -4, 4], 
    [3, -3, -4], [3, -3, 4], [3, -2, -4], [3, -2, 4], [3, -1, -4], [3, -1, 4], 
    [3, 0, -4], [3, 0, 4], [3, 1, -4], [3, 1, 4], [3, 2, -4], [3, 2, 4], 
    [3, 3, -4], [3, 3, 4], [3, 4, -4], [3, 4, -3], [3, 4, -2], [3, 4, -1], 
    [3, 4, 0], [3, 4, 1], [3, 4, 2], [3, 4, 3], [3, 4, 4], [4, -4, -4], 
    [4, -4, -3], [4, -4, -2], [4, -4, -1], [4, -4, 0], [4, -4, 1], [4, -4, 2], 
    [4, -4, 3], [4, -4, 4], [4, -3, -4], [4, -3, -3], [4, -3, -2], [4, -3, -1], 
    [4, -3, 0], [4, -3, 1], [4, -3, 2], [4, -3, 3], [4, -3, 4], [4, -2, -4], 
    [4, -2, -3], [4, -2, -2], [4, -2, -1], [4, -2, 0], [4, -2, 1], [4, -2, 2], 
    [4, -2, 3], [4, -2, 4], [4, -1, -4], [4, -1, -3], [4, -1, -2], [4, -1, -1], 
    [4, -1, 0], [4, -1, 1], [4, -1, 2], [4, -1, 3], [4, -1, 4], [4, 0, -4], 
    [4, 0, -3], [4, 0, -2], [4, 0, -1], [4, 0, 0], [4, 0, 1], [4, 0, 2], 
    [4, 0, 3], [4, 0, 4], [4, 1, -4], [4, 1, -3], [4, 1, -2], [4, 1, -1], 
    [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 2, -4], 
    [4, 2, -3], [4, 2, -2], [4, 2, -1], [4, 2, 0], [4, 2, 1], [4, 2, 2], 
    [4, 2, 3], [4, 2, 4], [4, 3, -4], [4, 3, -3], [4, 3, -2], [4, 3, -1], 
    [4, 3, 0], [4, 3, 1], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 4, -4], 
    [4, 4, -3], [4, 4, -2], [4, 4, -1], [4, 4, 0], [4, 4, 1], [4, 4, 2], 
    [4, 4, 3], [4, 4, 4]], dtype=np.int64), axis=0)